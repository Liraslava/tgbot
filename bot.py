from telebot import *
from googletrans import Translator  # pip install googletrans==4.0.0-rc1
from langdetect import detect
import wikipedia

bot = TeleBot('YOUR_BOT_TOKEN')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
translator = Translator()

user_states = {}
search_condit = {}
victorina_states = {}

# –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
questions = [
    {
        'question': '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤ 2023 –≥–æ–¥—É?',
        'options': ['Python', 'JavaScript', 'Java', 'C++'],
        'answer': 'Python'
    },
    {
        'question': '–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç HTML?',
        'options': ['HyperText Markup Language', 'High-Level Text Language',
                    'Home Tool Markup Language', 'Hyperlinks and Text Markup Language'],
        'answer': 'HyperText Markup Language'
    },
    {
        'question': '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏ —Ç–∏–ø—É –≤ JavaScript?',
        'options': ['==', '=', '===', '!=', '!=='],
        'answer': '==='
    },
    {
        'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?',
        'options': ['–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–º–æ–π —Å–µ–±—è', '–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞',
                    '–¶–∏–∫–ª —Å —É—Å–ª–æ–≤–∏–µ–º', '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        'answer': '–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–º–æ–π —Å–µ–±—è'
    },
    {
        'question': '–ö–∞–∫–æ–π —è–∑—ã–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º?',
        'options': ['Java', 'C++', 'Python', 'C', 'Ruby'],
        'answer': 'C'
    },
    {
        'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ API?',
        'options': ['Application Programming Interface', 'Advanced Programming Interface',
                    'Automated Programming Interface', 'Application Process Integration'],
        'answer': 'Application Programming Interface'
    },
    {
        'question': '–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Python?',
        'options': ['//', '#', '--', '/*', '*/'],
        'answer': '#'
    },
    {
        'question': '–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥: print(2 + 2 * 2) –≤ Python?',
        'options': ['6', '8', '4', '–û—à–∏–±–∫–∞'],
        'answer': '6'
    },
    {
        'question': '–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –∏–∑–º–µ–Ω—è–µ–º—ã–º –≤ Python?',
        'options': ['int', 'str', 'tuple', 'list', 'float'],
        'answer': 'list'
    },
    {
        'question': '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–∞—Ä–∞–¥–∏–≥–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –ø–æ–Ω—è—Ç–∏—è—Ö "–æ–±—ä–µ–∫—Ç–æ–≤"?',
        'options': ['–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ò–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        'answer': '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'
    },
    {
        'question': '–ö–∞–∫–æ–π —è–∑—ã–∫ —Å–æ–∑–¥–∞–ª –ë—Ä–µ–Ω–¥–∞–Ω –≠–π—Ö –∑–∞ 10 –¥–Ω–µ–π?',
        'options': ['Python', 'Java', 'JavaScript', 'PHP', 'Ruby'],
        'answer': 'JavaScript'
    },
    {
        'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ Git?',
        'options': ['–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π',
                    '–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', '–†–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'],
        'answer': '–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π'
    },
    {
        'question': '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –≤ Python?',
        'options': ['append()', 'add()', 'insert()', 'push()', 'extend()'],
        'answer': 'append()'
    },
    {
        'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ SQL?',
        'options': ['Simple Query Language', 'Structured Query Language',
                    'Standard Query Language', 'System Query Language'],
        'answer': 'Structured Query Language'
    },
    {
        'question': '–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö —è–∑—ã–∫–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º—ã–º?',
        'options': ['Python', 'JavaScript', 'Ruby', 'C++', 'PHP'],
        'answer': 'C++'
    }
]

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! 
    –ò—Å–ø–æ–ª—å–∑—É–π /translate –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ /stoptranslate –¥–ª—è –µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ /desearch –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    –ò—Å–ø–æ–ª—å–∑—É–π /victorina –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é''')

@bot.message_handler(commands=['translate'])
def start_translate(message):
    user_states[message.chat.id] = True
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–≤–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')

@bot.message_handler(commands=['stoptranslate'])
def stop_translate(message):
    user_states[message.chat.id] = False
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')

@bot.message_handler(commands=['search'])
def search(message):
    search_condit[message.chat.id] = True
    bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!')

@bot.message_handler(commands=['desearch'])
def desearch(message):
    search_condit[message.chat.id] = False
    bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')

@bot.message_handler(commands=['victorina'])
def victorina(message):
    global question_index
    victorina_states[message.chat.id] = True
    question_index = 0
    bot.send_message(message.chat.id, '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–ø—É—â–µ–Ω–∞!')
    ask_question(message.chat.id, question_index)


def ask_question(chat_id, question_index):
    question = questions[question_index]
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for option in question['options']:
        markup.add(option)
    bot.send_message(chat_id, f'–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(questions)}: {question["question"]}',
                     reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    global question_index

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if victorina_states.get(message.chat.id, False):
        user_answer = message.text
        correct_answer = questions[question_index]['answer']

        if user_answer == correct_answer:
            bot.send_message(message.chat.id, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
        else:
            bot.send_message(message.chat.id, f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}')

        if question_index < len(questions) - 1:
            question_index += 1
            ask_question(message.chat.id, question_index)
        else:
            victorina_states[message.chat.id] = False
            bot.send_message(message.chat.id, 'üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!',
                             reply_markup=types.ReplyKeyboardRemove())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    elif user_states.get(message.chat.id, False):
        try:
            translate_text = translator.translate(message.text, src=detect(message.text), dest='en').text
            bot.send_message(message.chat.id, translate_text)
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    elif search_condit.get(message.chat.id, False):
        wikipedia.set_lang('ru')
        try:
            result = wikipedia.search(message.text)
            if not result:
                bot.send_message(message.chat.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            else:
                page = wikipedia.page(result[0])
                bot.send_message(message.chat.id, page.url)
        except wikipedia.exceptions.DisambiguationError as e:
            bot.send_message(message.chat.id, f'–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {", ".join(e.options[:5])}')
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}')

bot.polling()
